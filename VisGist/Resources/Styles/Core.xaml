<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
                    xmlns:mwt1="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
                    xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit">

    <!-- STYLES ================================================================================= -->

    <!-- TOOLBAR STYLE -->

    <Style x:Key="ToolBarTray" TargetType="ToolBarTray">
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <Style x:Key="ToolBar" TargetType="ToolBar">
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}" />
        <Setter Property="Focusable" Value="False" />
    </Style>

    <Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="Separator">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}" />
    </Style>

    <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" TargetType="ToggleButton">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}" />
    </Style>

    <Style x:Key="{x:Static ToolBar.MenuStyleKey}" TargetType="Menu">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <!-- BUTTON STYLE -->
    <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#2000A2Ed" />
                <Setter Property="BorderThickness" Value="1" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderThickness" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- DROPDOWNBUTTON -->
    <Style x:Key="DropDownButton" TargetType="{x:Type MenuItem}">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}" />
        <Setter Property="Width" Value="22" />
        <Setter Property="Height" Value="22" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid VerticalAlignment="Center" SnapsToDevicePixels="true" Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}">
                        <Border x:Name="Bd" BorderBrush="Transparent" BorderThickness="1" 
                                Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}">
                            <DockPanel VerticalAlignment="Center">
                                <ContentPresenter x:Name="Icon" Width="16" Height="16" Margin="2" ContentSource="Icon"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                                  VerticalAlignment="Center" HorizontalAlignment="Center" />
                                <Path x:Name="GlyphPanel" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" 
                                      Margin="7,0,0,0" Visibility="Collapsed" VerticalAlignment="Center" />
                                <ContentPresenter x:Name="content" ContentSource="Header" Margin="{TemplateBinding Padding}" 
                                                  RecognizesAccessKey="True"  VerticalAlignment="Center"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </DockPanel>
                        </Border>
                        <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="1" 
                               IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" 
                               Placement="Bottom" VerticalOffset="-1">
                            <Border BorderThickness="1" BorderBrush="Gray" 
                                    Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}">
                                <ScrollViewer x:Name="SubMenuScrollViewer"  CanContentScroll="true" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                    <Grid RenderOptions.ClearTypeHint="Enabled" 
                                          Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}">
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" Margin="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle" />
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="#2000A2Ed" />
                            <Setter Property="BorderBrush" TargetName="Bd" Value="Gray" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TOGGLEBUTTON STYLE-->

    <Style TargetType="{x:Type ToggleButton}" x:Key="TransparentToggleButtonStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center"
                                              VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Opacity" Value="0.3" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- TEXTBLOCK STYLES -->

    <Style x:Key="SemiTransparentText" TargetType="TextBlock">
        <Setter Property="Opacity" Value="0.6" />
    </Style>

    <!-- CONTEXTMENU STYLE -->
    <Style x:Key="ContextMenu" TargetType="ContextMenu">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"
                                BorderBrush="Gray" BorderThickness="1">
                        <StackPanel ClipToBounds="True" Orientation="Vertical" IsItemsHost="True" Margin="2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- MENU ITEM STYLE -->
    <Style x:Key="MenuItem" TargetType="MenuItem">
        <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}" />
    </Style>

    <!-- SEPARATORSTYLE -->
    <Style x:Key="SplitterStyle" TargetType="GridSplitter">
        <Setter Property="BorderBrush" Value="#909090" />
        <Setter Property="Opacity" Value="0.5" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="1" />
    </Style>

    <!-- TREEVIEWITEM STYLE -->
    <Style x:Key="TreeViewItemStyle" TargetType="TreeViewItem">
        <Setter Property="Margin" Value="0,0,0,1" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}" />
    </Style>

    <!-- TEXTBOX STYLES -->
    <!-- Filename Textbox (red highlighted border to provide user feedback for invalid filenames-->
    <Style x:Key="FilenameTextBox" TargetType="TextBox">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <StackPanel>
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
                        </Border>
                        <ItemsControl ItemsSource="{TemplateBinding Validation.Errors}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Foreground="Red" FontStyle="Italic"  Text="{Binding ErrorContent}" Padding="4,0,0,2" />
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- AVALON EDIT STYLES-->
    <!--<Style TargetType="{x:Type avalonEdit:TextView}">
        <Setter Property="LinkTextForegroundBrush" Value="Red" />
    </Style>-->
    
    
</ResourceDictionary>