<UserControl x:Class="VisGist.MainWindow"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
            xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
            xmlns:imaging="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.Imaging"
            xmlns:catalog="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.ImageCatalog"
            xmlns:toolkit="clr-namespace:Community.VisualStudio.Toolkit;assembly=Community.VisualStudio.Toolkit"
            xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
            xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
            xmlns:behaviours="clr-namespace:VisGist.Behaviors"
            xmlns:enums="clr-namespace:VisGist.Enums"
            xmlns:controls="clr-namespace:VisGist.Controls"
            xmlns:converters="clr-namespace:VisGist.Converters" 
            xmlns:viewmodels="clr-namespace:VisGist.ViewModels" 
            xmlns:exts="clr-namespace:VisGist.Extensions"
            xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
            xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
            toolkit:Themes.UseVsTheme="True"
            Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}" 
            Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}" 
            mc:Ignorable="d"
            d:DesignHeight="300" d:DesignWidth="300" d:Foreground="white"
            AllowDrop="True"
            Name="MyToolWindow" SizeChanged="MyToolWindow_SizeChanged" Loaded="MyToolWindow_Loaded">

    <UserControl.DataContext>
        <viewmodels:MainWindowViewModel/>
    </UserControl.DataContext>

    <UserControl.Resources>

        <!-- STYLES -->
        <ResourceDictionary>

            <!-- CONVERTERS ================================================================================= -->
            <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
            <converters:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" />
            <converters:GistFilesVMToFirstFilenameConverter x:Key="GistFilesToFirstFilenameConverter"/>
            <converters:ReverseBoolConverter x:Key="ReverseBoolConverter"/>
            <converters:BrushToColorConverter x:Key="BrushToColorConverter"/>
            <converters:FontToFontFamilyConverter x:Key="FontToFontFamilyConverter"/>
            <converters:GistToIndicatorIconConverter x:Key="GistToIndicatorIconConverter"/>
            <converters:BoolToOpacityConverter x:Key="BoolToOpacityConverter" />
            <converters:FilenameToLanguageConverter x:Key="FilenameToLanguageConverter" />
            <converters:EmptyStringToVisibilityConverter x:Key="EmptyStringToVisibilityConverter" />
            <converters:IntToVisibilityConverter x:Key="IntToVisibilityConverter" />

            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="../Resources/Styles/Core.xaml"/>
                <ResourceDictionary Source="../Resources/Styles/ComboBox.xaml"/>

            </ResourceDictionary.MergedDictionaries>
            
        </ResourceDictionary>

    </UserControl.Resources>

    <!-- WINDOW ================================================================================= -->
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded" SourceObject ="{Binding ElementName=MyToolWindow}">
            <i:InvokeCommandAction Command="{Binding DoPostLoadActionsCMD}"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <DockPanel x:Name="MainDP" Height="Auto" LastChildFill="True" AllowDrop="True">

        <!-- TOP TOOLSTRIP -->
        <DockPanel x:Name="TopToolbarDP" DockPanel.Dock="Top" LastChildFill="True">

            <ToolBarTray x:Name="GreeterTBT" Style="{DynamicResource ToolBarTray}" Visibility="{Binding IsAuthenticated,
                Converter={StaticResource InverseBoolToVisibilityConverter}}" Background="Transparent">
                <controls:ToolBar Style="{DynamicResource ToolBar}" ToolBarTray.IsLocked="true"
                d:Visibility="Visible" >

                    <Button x:Name="LoginBT" Command="{Binding GitAuthenticateCMD}" ToolTip="Log In">
                        <imaging:CrispImage Width="16" Height="16" Moniker="{x:Static catalog:KnownMonikers.LoginUser}"/>
                    </Button>

                </controls:ToolBar>
            </ToolBarTray>

            <ToolBarTray x:Name="MainTBT" Style="{DynamicResource ToolBarTray}" Visibility="{Binding IsAuthenticated,
                Converter={StaticResource BoolToVisibilityConverter}}" d:Visibility="Visible">

                <controls:ToolBar Style="{DynamicResource ToolBar}" ToolBarTray.IsLocked="true" HorizontalAlignment="Stretch"
                                  OverflowBehaviour="ShowWhenNeeded"
                                  Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}">

                    <Button x:Name="SaveBT" Command="{Binding SaveGistCMD}" ToolTip="Save Selected Gist" Click="SaveBT_Click"
                            IsEnabled="{Binding SelectedGistViewModel.CanSave}">
                        <imaging:CrispImage Width="16" Height="16" Moniker="{x:Static catalog:KnownMonikers.Save}" 
                                            Opacity="{Binding SelectedGistViewModel.CanSave, Converter={StaticResource BoolToOpacityConverter}}"/>
                    </Button>

                    <Button x:Name="SaveAllBT" Command="{Binding SaveAllGistsCMD}" ToolTip="Save All Gists" Click="SaveBT_Click">
                        <imaging:CrispImage Width="16" Height="16" Moniker="{x:Static catalog:KnownMonikers.SaveAll}"/>
                    </Button>

                    <Button x:Name="NewGistBT" Command="{Binding AddNewGistCMD}" ToolTip="New Gist">
                        <imaging:CrispImage Width="16" Height="16" Moniker="{x:Static catalog:KnownMonikers.NewListItem}" />
                    </Button>

                    <!--<Separator Background="Gray"></Separator>-->

                    <Button x:Name="CollapseTreeBT" Command="{Binding CollapseTreeCMD}" CommandParameter="{Binding ElementName=GistsTV}"  ToolTip="Collapse All Gists">
                        <imaging:CrispImage Width="16" Height="16" Moniker="{x:Static catalog:KnownMonikers.CollapseAll}" />
                    </Button>

                    <Menu d:Background="Transparent" ToolTip="Sort Gists">
                        <MenuItem Style="{StaticResource DropDownButton}">
                            <MenuItem.Icon>
                                <imaging:CrispImage Moniker="{x:Static catalog:KnownMonikers.SortAscending}" />
                            </MenuItem.Icon>
                            <MenuItem Header="Alphabetical" Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"
                                      Command="{Binding SortGistsCMD}" CommandParameter="{x:Static enums:GistSortMethod.Alphabetical}">
                                <MenuItem.Icon>
                                    <imaging:CrispImage Moniker="{x:Static catalog:KnownMonikers.SortAscending}" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Starred" Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"
                                      Command="{Binding SortGistsCMD}" CommandParameter="{x:Static enums:GistSortMethod.Starred}">
                                <MenuItem.Icon>
                                    <imaging:CrispImage Moniker="{x:Static catalog:KnownMonikers.Favorite}" />
                                </MenuItem.Icon>
                            </MenuItem>
                            <MenuItem Header="Private" Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"
                                      Command="{Binding SortGistsCMD}" CommandParameter="{x:Static enums:GistSortMethod.Public}">
                                <MenuItem.Icon>

                                    <imaging:CrispImage Moniker="{x:Static catalog:KnownMonikers.Key}" />
                                </MenuItem.Icon>
                            </MenuItem>
                        </MenuItem>
                    </Menu>


                    <ComboBox x:Name="LanguageSelectorCB" Width="85" Style="{StaticResource ComboBoxStyle}"
                              IsEditable="False" IsReadOnly="True" 
                              Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}" 
                              Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"  
                              d:Foreground="White"
                              ItemsSource="{Binding Syntaxes}" Margin="2,0,2,0" 
                              SelectedItem="{Binding SelectedSyntaxViewModel, Mode=TwoWay}"
                              DisplayMemberPath="Name">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="SelectionChanged">
                                <i:InvokeCommandAction Command="{Binding SetSyntaxHighlightingCMD}" 
                                                       CommandParameter="{Binding ElementName=CodeEditor}"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </ComboBox>

                    <!--<Separator Background="Gray"></Separator>-->


                    <!--<Button x:Name="SortDropdownButton" Click="SortDropdownButton_Click" ToolTip="Sort Gists" DockPanel.Dock="Right"
                     Width="28" Background="Transparent">
                        <imaging:CrispImage Width="16" Height="16" Moniker="{x:Static catalog:KnownMonikers.SortByColumn}" />
                        <Button.ContextMenu>
                            <ContextMenu >
                                <MenuItem Header="By Name" Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"
                                          >
                                    <MenuItem.Icon>
                                        <imaging:CrispImage  Moniker="{x:Static catalog:KnownMonikers.SortAscending}" />
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="Add 2"/>
                                <MenuItem Header="Add 3"/>
                            </ContextMenu>
                        </Button.ContextMenu>
                    </Button>-->

                    <!--<Button Content="Open Context Menu">
                        <Button.Style>
                            <Style TargetType="{x:Type Button}">
                                <Style.Triggers>
                                    <EventTrigger RoutedEvent="Click">
                                        <EventTrigger.Actions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="ContextMenu.IsOpen">
                                                        <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="True"/>
                                                    </BooleanAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger.Actions>
                                    </EventTrigger>
                                </Style.Triggers>
                                <Setter Property="ContextMenu">
                                    <Setter.Value>
                                        <ContextMenu>
                                            <MenuItem />
                                            <MenuItem />
                                        </ContextMenu>
                                    </Setter.Value>
                                </Setter>                                
                            </Style>
                        </Button.Style>
                    </Button>-->

                    <Button x:Name="RefreshBT" Command="{Binding GetAllGistsCMD}" ToolTip="Get Gists from Github">
                        <imaging:CrispImage Width="16" Height="16" Moniker="{x:Static catalog:KnownMonikers.Refresh}" />
                    </Button>

                    <Button x:Name="TestBT" Command="{Binding DoTestActionCMD}" ToolTip="Run Test"
                            CommandParameter="{Binding ElementName=aeEditor}">
                        <imaging:CrispImage Width="16" Height="16" Moniker="{x:Static catalog:KnownMonikers.RunTest}" />
                    </Button>

                    <!--<Button x:Name="TestBT" Command="{Binding DoTestActionCMD}" ToolTip="Test" MouseDown="TestBT_Click">
                        <imaging:CrispImage Width="16" Height="16" Moniker="{x:Static catalog:KnownMonikers.NewTest}" />
                    </Button>-->

                </controls:ToolBar>
            </ToolBarTray>

        </DockPanel>


        <!-- SEARCH TEXTBOX -->
        <DockPanel DockPanel.Dock="Top" LastChildFill="True" Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}">
            <TextBox x:Name="SearchTB" Margin="4,2,4,2"
                Text="{Binding SearchExpression, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                Visibility="{Binding IsAuthenticated, Converter={StaticResource BoolToVisibilityConverter}}" 
                Padding="6,0,0,0"
                d:Visibility="Visible" d:Background="Transparent" d:Foreground="White">
                <TextBox.Template>
                    <ControlTemplate>
                        <Border Background="Transparent" CornerRadius="4" BorderBrush="Gray" BorderThickness="1">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <ScrollViewer Grid.Column="0" Margin="0" x:Name="PART_ContentHost"  VerticalAlignment="Center" Padding="0"/>
                                <Label x:Name="searchLabel" Grid.Column="0" Foreground="Gray" Margin="4,0,0,0"   Content="Search"  FontStyle="Italic" 
                                       VerticalAlignment="Center" Visibility="{Binding SearchExpression, Converter={StaticResource EmptyStringToVisibilityConverter}}" />
                                <imaging:CrispImage Grid.Column="1" Margin="0,1,4,0" Width="16" Height="16" Moniker="{x:Static catalog:KnownMonikers.Search}" />
                    
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </TextBox.Template>
            </TextBox>
        </DockPanel>

        <!-- STATUS BAR -->
        <StatusBar x:Name="MainSB" DockPanel.Dock="Bottom" Margin="4" 
                   Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}" Background="Transparent"
                   d:Foreground="White">
            <StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition Width="auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                    </Grid>
                </ItemsPanelTemplate>
            </StatusBar.ItemsPanel>

            <StatusBarItem Grid.Column="0" VerticalContentAlignment="Center">
                <imaging:CrispImage Tag="{Binding StatusImage}" Width="16" Height="16" VerticalAlignment="Center">
                    <imaging:CrispImage.Style>
                        <Style TargetType="imaging:CrispImage">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding StatusImage}" Value="Information">
                                    <Setter Property="Moniker" Value="{x:Static catalog:KnownMonikers.StatusInformation}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding StatusImage}" Value="Warning">
                                    <Setter Property="Moniker" Value="{x:Static catalog:KnownMonikers.StatusWarning}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding StatusImage}" Value="Success">
                                    <Setter Property="Moniker" Value="{x:Static catalog:KnownMonikers.StatusOK}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding StatusImage}" Value="GitOperation">
                                    <Setter Property="Moniker" Value="{x:Static catalog:KnownMonikers.GitHub}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </imaging:CrispImage.Style>
                </imaging:CrispImage>
            </StatusBarItem>

            <StatusBarItem Grid.Column="1">
                <TextBlock  Text="{Binding StatusText}"  Padding="6,0,2,0" VerticalAlignment="Center"></TextBlock>
            </StatusBarItem>
            <!--<ProgressBar Height="2" Foreground="Blue" IsIndeterminate="True"
                             Visibility="{Binding AsyncOperationStatusManager.CurrentOperation.Execution.IsNotCompleted, Converter={StaticResource boolToVisibilityConverter}, FallbackValue=Collapsed}"/>-->

            <StatusBarItem Grid.Column="2" HorizontalContentAlignment="Stretch" >
                <ProgressBar  Height="2" Foreground="#00A2ED" IsIndeterminate="True" Margin="10,0,10,0" VerticalAlignment="Center"
                             HorizontalContentAlignment="Stretch" Background="Transparent" BorderBrush="#40808080"
                             Visibility="{Binding StatusBarVisible, Converter={StaticResource BoolToVisibilityConverter}}"
                             d:Visibility="Visible"/>

            </StatusBarItem>


        </StatusBar>


        <!-- MAIN CONTENT PANEL -->

        <!--<ContentControl>
            <ContentControl.Resources>
                <DataTemplate x:Key="mainTable">
                    <StackPanel>
                        <Label Content="MainTable goes here"/>
                    </StackPanel>
                </DataTemplate>
                <DataTemplate x:Key="childTables">
                    <Label Content="ChildTables go here"/>
                </DataTemplate>
            </ContentControl.Resources>
            <ContentControl.Style>
                <Style TargetType="ContentControl">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding LayoutHorizontal}" Value="False">
                            <Setter Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition/>
                                                <ColumnDefinition Width="2"/>
                                                <ColumnDefinition/>
                                            </Grid.ColumnDefinitions>
                                            <ContentPresenter Grid.Column="0" ContentTemplate="{StaticResource mainTable}"/>
                                            <GridSplitter Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                                          Foreground="Gray" Opacity="0.5"/>
                                            <ContentPresenter Grid.Column="2" ContentTemplate="{StaticResource childTables}"/>
                                        </Grid>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding LayoutHorizontal}" Value="True">
                            <Setter Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition/>
                                                <RowDefinition Height="1"/>
                                                <RowDefinition/>
                                            </Grid.RowDefinitions>
                                            <ContentPresenter Grid.Row="0" ContentTemplate="{StaticResource mainTable}"/>
                                            <GridSplitter Grid.Row="1" Height="10" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                                                          Foreground="Gray" Opacity="0.5"/>
                                            <ContentPresenter Grid.Row="2" ContentTemplate="{StaticResource childTables}"/>
                                        </Grid>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ContentControl.Style>
        </ContentControl>-->


        <Grid x:Name="MainContentGRD"  HorizontalAlignment="Stretch" 
                   Visibility="{Binding CollatedGists.Count, Converter={StaticResource IntToVisibilityConverter}}"
                   d:Visibility="Visible" Margin="2" AllowDrop="True">

            <Grid.RowDefinitions>
                <RowDefinition Height="*" MinHeight="40" x:Name="GistBrowserRow"></RowDefinition>
                <RowDefinition Height="3"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
            </Grid.RowDefinitions>

            <!-- 0. GIST BROWSER -->

            <Grid x:Name="GistBrowserGRD" Grid.Row="0" Tag="{Binding ElementName=MyToolWindow, Path=DataContext}">
                <Grid.Resources>

                    <!-- GIST LEVEL -->

                    <HierarchicalDataTemplate DataType="{x:Type viewmodels:GistViewModel}" ItemsSource="{Binding Path=GistFiles}">

                        <HierarchicalDataTemplate.Resources>
                            <Style TargetType="{x:Type TreeViewItem}">
                                <Setter Property="IsExpanded" Value="{Binding NodeExpanded, Mode=TwoWay}"/>
                            </Style>
                        </HierarchicalDataTemplate.Resources>

                        <StackPanel Orientation="Horizontal">
                            <imaging:CrispImage VerticalAlignment="Center" Margin="0,0,4,0" ToolTip="{Binding PropertiesChanged}">
                                <imaging:CrispImage.Resources>
                                    <Style TargetType="ToolTip">
                                        <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}" />
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}" />
                                    </Style>
                                </imaging:CrispImage.Resources>
                                <imaging:CrispImage.Style>
                                    <Style TargetType="imaging:CrispImage">
                                        <Setter Property="Moniker" Value="{x:Static catalog:KnownMonikers.Item}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HasChanges}" Value="True">
                                                <Setter Property="Moniker" Value="{x:Static catalog:KnownMonikers.Save}"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding CanSave}" Value="False">
                                                <Setter Property="Moniker" Value="{x:Static catalog:KnownMonikers.ExclamationPoint}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </imaging:CrispImage.Style>
                            </imaging:CrispImage>

                            <TextBlock VerticalAlignment="Center" Margin="0,0,4,0"
                                Text="{Binding GistFiles, Converter={StaticResource GistFilesToFirstFilenameConverter}}"></TextBlock>

                            <imaging:CrispImage VerticalAlignment="Center" Margin="0,0,0,0"  Width="14" Height="14"
                                Moniker="{x:Static catalog:KnownMonikers.Key}"
                                Visibility="{Binding Public, Converter={StaticResource InverseBoolToVisibilityConverter}}"/>

                            <imaging:CrispImage VerticalAlignment="Center" Margin="1,0,0,0" Width="14" Height="14" 
                                Moniker="{x:Static catalog:KnownMonikers.Favorite}"
                                Visibility="{Binding Starred, Converter={StaticResource BoolToVisibilityConverter}}"/>

                            <StackPanel.ContextMenu>
                                <ContextMenu Style="{StaticResource ContextMenu}" 
                                             DataContext="{Binding DataContext, Source={exts:RootObject}}">

                                    <!-- View on Github -->
                                    <MenuItem Header="View in Github" Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"
                                                 Style="{StaticResource MenuItem}"                                               
                                                 Command="{Binding ViewInGithubCMD}">
                                        <MenuItem.Icon>
                                            <imaging:CrispImage Moniker="{x:Static catalog:KnownMonikers.GitHub}"/>
                                        </MenuItem.Icon>
                                    </MenuItem>


                                    <!-- Delete Gist -->
                                    <MenuItem Header="Delete Gist" Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"
                                              Style="{StaticResource MenuItem}"                                               
                                              Command="{Binding DeleteGistCMD}">
                                        <MenuItem.Icon>
                                            <imaging:CrispImage Moniker="{x:Static catalog:KnownMonikers.DeleteListItem}"/>
                                        </MenuItem.Icon>
                                    </MenuItem>

                                    <!-- New GistFile -->
                                    <MenuItem Header="New GistFile" Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"
                                              Style="{StaticResource MenuItem}"                                               
                                              Command="{Binding AddNewGistFileCMD}">
                                        <MenuItem.Icon>
                                            <imaging:CrispImage Moniker="{x:Static catalog:KnownMonikers.NewDocument}"/>
                                        </MenuItem.Icon>
                                    </MenuItem>

                                </ContextMenu>
                            </StackPanel.ContextMenu>

                        </StackPanel>
                    </HierarchicalDataTemplate>

                    <!-- GIST FILE LEVEL -->

                    <DataTemplate DataType="{x:Type viewmodels:GistFileViewModel}">
                        <StackPanel Orientation="Horizontal">
                            <!--<imaging:CrispImage VerticalAlignment="Center" Width="16" Height="16" Margin="0,0,2,0"
                                                Moniker="{x:Static catalog:KnownMonikers.Document}" />-->
                            <imaging:CrispImage VerticalAlignment="Center" Margin="0,0,2,0">
                                <imaging:CrispImage.Style>
                                    <Style TargetType="imaging:CrispImage">
                                        <Setter Property="Moniker" Value="{x:Static catalog:KnownMonikers.Document}"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding HasChanges}" Value="True">
                                                <Setter Property="Moniker" Value="{x:Static catalog:KnownMonikers.Save}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </imaging:CrispImage.Style>
                            </imaging:CrispImage>

                            <TextBlock  VerticalAlignment="Center" Margin="2,0,2,0" Text="{Binding Filename}"></TextBlock>

                            <StackPanel.ContextMenu>
                                <ContextMenu Style="{StaticResource ContextMenu}" 
                                             DataContext="{Binding DataContext, Source={exts:RootObject}}">
                                    <!-- Delete GistFile -->
                                    <MenuItem Header="Delete GistFile" Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"
                                              Style="{StaticResource MenuItem}"                                               
                                              Command="{Binding DeleteGistFileCMD}">
                                        <MenuItem.Icon>
                                            <imaging:CrispImage Moniker="{x:Static catalog:KnownMonikers.DeleteDocument}"/>
                                        </MenuItem.Icon>
                                    </MenuItem>

                                    <MenuItem Header="Make Title Gist" Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"
                                              Style="{StaticResource MenuItem}"                                               
                                              Command="{Binding MakeGistTitleCMD}">
                                        <MenuItem.Icon>
                                            <imaging:CrispImage Moniker="{x:Static catalog:KnownMonikers.HeadingOne}"/>
                                        </MenuItem.Icon>
                                    </MenuItem>

                                </ContextMenu>
                            </StackPanel.ContextMenu>
                        </StackPanel>
                    </DataTemplate>

                </Grid.Resources>

                <TreeView x:Name="GistsTV" ItemsSource="{Binding CollatedGists}" BorderThickness="0" Background="Transparent"
                          PreviewMouseRightButtonDown="GistsTV_PreviewMouseRightButtonDown"
                          SizeChanged="GistsTV_SizeChanged">
                    <TreeView.ItemContainerStyle>
                        <Style TargetType="{x:Type TreeViewItem}">
                            <!--<Setter Property="IsExpanded" Value="{Binding NodeExpanded, Mode=TwoWay}"/>-->
                            <Setter Property="Margin" Value="0,0,0,1"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"/>
                        </Style>
                    </TreeView.ItemContainerStyle>
                    <TreeView.Resources>
                        <!-- Style the inactive selection the same as active -->
                        <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}"
                            Color="#808080" Opacity="0.4"/>
                        <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}"
                            Color="{DynamicResource {x:Static SystemColors.HighlightTextColorKey}}"/>
                    </TreeView.Resources>
                    <i:Interaction.Behaviors>
                        <behaviours:BindableSelectedItemBehavior SelectedItem="{Binding SelectedGistVmItem, Mode=TwoWay}" />
                    </i:Interaction.Behaviors>
                </TreeView>
            </Grid>

            <!-- 1. SPLITTER -->

            <GridSplitter Grid.Row="1" Style="{StaticResource SplitterStyle}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />

            <!--2. GIST EDITOR -->

            <Grid x:Name="GistEditorSP" Grid.Row="2">

                <Grid.RowDefinitions>
                    <RowDefinition Height="auto" />
                    <RowDefinition Height="auto" />
                    <RowDefinition x:Name="GistDescriptionRow" Height="auto" MinHeight="30" />
                    <RowDefinition Height="3" />
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="*"/>

                </Grid.RowDefinitions>

                <!-- Gist Title and Buttons -->
                <DockPanel x:Name="GistTitleDP" Grid.Row="0">

                    <ToggleButton DockPanel.Dock="Right" Background="Transparent" BorderThickness="0" Margin="0,0,2,0"
                                  Style="{StaticResource TransparentToggleButtonStyle}"
                                  ToolTip="Starred Status"
                                  IsChecked="{Binding SelectedGistViewModel.Starred, Mode=TwoWay}">
                        <imaging:CrispImage Width="16" Height="16" Moniker="{x:Static catalog:KnownMonikers.Favorite}"/>
                    </ToggleButton>

                    <ContentControl DockPanel.Dock="Left" Margin="2,0,2,0" ToolTip="{Binding SelectedGistViewModel.PrimaryGistFilename}">
                        <imaging:CrispImage  Width="16" Height="16" Moniker="{x:Static catalog:KnownMonikers.Item}"/>
                    </ContentControl>

                    <TextBlock x:Name="GistNameTBL" Padding="4" Style="{StaticResource SemiTransparentText}" TextTrimming="CharacterEllipsis"
                               Text="{Binding SelectedGistViewModel.PrimaryGistFilename}" FontWeight="Bold"
                                   d:Text="Gist Name">
                    </TextBlock>
                </DockPanel>

                <Separator Grid.Row="1" Background="Gray"></Separator>

                <!-- Gist Description -->

                <ScrollViewer x:Name="GistDescriptionSV" Grid.Row="2" VerticalScrollBarVisibility="Auto" SizeChanged="GistDescriptionSV_SizeChanged">
                    <TextBox x:Name="GistDescriptionTB" MinHeight="32" Background="Transparent" Padding="1" AcceptsReturn="True"
                             TabIndex="0" VerticalAlignment="Top" IsTabStop="True" BorderThickness="0"
                         Text="{Binding SelectedGistViewModel.Description}"
                         CaretBrush="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"
                         d:Text="Gist Description" d:Foreground="White"></TextBox>
                </ScrollViewer>

                <!-- Splitter -->

                <GridSplitter Grid.Row="3" Style="{StaticResource SplitterStyle}" HorizontalAlignment="Stretch" />

                <!-- GistFile Filename Controls -->

                <DockPanel x:Name="GistFileFilenameDP" Grid.Row="4" Margin="2,4,0,2" LastChildFill="True">

                    <ContentControl DockPanel.Dock="Left" VerticalAlignment="Center" Margin="0,0,2,0"
                                    ToolTip="{Binding SelectedGistFileViewModel.Filename}">
                        <imaging:CrispImage Width="16" Height="16" Moniker="{x:Static catalog:KnownMonikers.Document}"/>
                    </ContentControl>

                    <!--<ContentControl DockPanel.Dock="Right" VerticalAlignment="Top" ToolTip="Code Pop-out" Margin="0,0,2,0">
                        <imaging:CrispImage  Width="16" Height="16" Moniker="{x:Static catalog:KnownMonikers.DocumentSource}"/>
                    </ContentControl>-->

                    <Button DockPanel.Dock="Right" VerticalAlignment="Center" ToolTip="Code Pop-out" Margin="0,0,2,0" Width="20" Height="20"
                        Style="{StaticResource ButtonStyle}" Command="{Binding PopoutCodeCMD}">
                        <imaging:CrispImage Moniker="{x:Static catalog:KnownMonikers.DocumentSource}"/>
                    </Button>
                    
                    <Button DockPanel.Dock="Right" VerticalAlignment="Center" ToolTip="Toggle Line Numbers"
                            Margin="0,0,2,0" Width="20" Height="20" Command="{Binding SetCodeNumberingVisibleCMD}"
                            Style="{StaticResource ButtonStyle}" >
                        <imaging:CrispImage Moniker="{x:Static catalog:KnownMonikers.OrderedList}"/>
                    </Button>

                    <Button DockPanel.Dock="Right" VerticalAlignment="Center" ToolTip="Toggle WordWrap" 
                            Margin="0,0,2,0" Width="20" Height="20" Command="{Binding SetCodeWordWrapEnabledCMD}"
                            Style="{StaticResource ButtonStyle}">
                        <imaging:CrispImage Moniker="{x:Static catalog:KnownMonikers.WordWrap}"/>
                    </Button>

                    <TextBox x:Name="GistFileFilenameTB"  Background="Transparent" Style="{StaticResource FilenameTextBox}"
                        BorderThickness="0" KeyDown="GistFileFilenameTB_KeyDown"                   
                        Text="{Binding SelectedGistFileViewModel.Filename, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                        CaretBrush="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"
                        TabIndex="1" IsTabStop="True" VerticalAlignment="Center" 
                        d:Text="GistFile Filename.cs" d:Foreground="White">
                    </TextBox>

                </DockPanel>

                <Separator Grid.Row="5" Background="Gray"></Separator>

                <!-- GistFile Filename Controls -->

                <!--<syncfusion:EditControl x:Name="CodeEC" Grid.Row="6"
                        Text="{Binding SelectedGistFileViewModel.Content, Mode=TwoWay, UpdateSourceTrigger=LostFocus,
                        FallbackValue=''}"
                        IsAutoLineNumberAreaWidthEnabled="True"   
                        LineNumberTextForeground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"
                        Background="Transparent"
                        Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"
                        LineNumberAreaBackground="Transparent"
                        OutliningAreaWidth="0"
                        ShowLineNumber="{Binding CodeNumberingVisible}"
                        AcceptsTab="True"
                        TabIndex="2" IsTabStop="True"
                        DocumentLanguage="{Binding SelectedLanguage}"
                        AllowDragDrop="True" AllowDrop="True"
                        CaretBrush="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}" Grid.ColumnSpan="2">
                         -->
                <!--FontFamily="Consolas" FontSize="{Binding CodeSize}"-->
                <!--
                </syncfusion:EditControl>-->

                <avalonEdit:TextEditor x:Name="CodeEditor" Grid.Row="6"
                    SyntaxHighlighting="C#" FontFamily="Consolas" FontSize="10pt"
                    Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"
                    Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"
                    VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto"                                                                     
                    ShowLineNumbers="{Binding CodeNumberingVisible}" WordWrap="{Binding CodeWordWrapEnabled}">
                    <i:Interaction.Behaviors>
                        <behaviours:AvalonEditBehaviour BoundText="{Binding SelectedGistFileViewModel.Content, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    </i:Interaction.Behaviors>
                </avalonEdit:TextEditor>

            </Grid>

        </Grid>
        <!-- /MainContentGRD -->




    </DockPanel>

</UserControl>
